#!/usr/bin/env python3

# BSD 3-Clause License

# Copyright (c) 2021, Maxim Konakov
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.

# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from sys import stdin, argv, exit
from signal import signal, strsignal, SIGHUP, SIGINT, SIGTERM

# install signal handlers
def sig_handler(sig, _):
	exit(f'{strsignal(sig)} [{sig}]')

signal(SIGHUP, sig_handler)
signal(SIGINT, sig_handler)
signal(SIGTERM, sig_handler)

# other imports
from re import compile as regex, error as regex_error
from json import JSONEncoder
from math import isfinite

# command line parameters
if len(argv) != 2:
	from os.path import basename
	exit(f'''\
Usage: {basename(argv[0])} REGEX
  Take input text from STDIN and convert it to JSON via the given Python regular
  expression REGEX. Each line of the input is searched for the first match of the
  regular expression and converted to a JSON object using names of the capturing
  groups as keys, and their corresponding captures as values. Unnamed capturing
  groups and groups that did not match are ignored. Each input line is stripped
  of any trailing whitespace before applying REGEX. Output always goes to STDOUT.

  By default, in each output object all values are JSON strings, unless the
  capturing group name has "__N" suffix, in which case the program makes an attempt
  to convert the value to a JSON number, or "__B" suffix to convert the value to
  JSON "true" or "false". In either case, the suffix is removed from the key, and
  failed conversions leave values as strings. The boolean conversion treats strings
  like "true" or "yes" as JSON "true", and strings like "false" and "no" as JSON
  "false", case-insensitive.''')

# compile regex
try:
	search = regex(argv[1]).search
except regex_error as err:
	exit(f'error: invalid regular expression: {err}')

# value converters
def to_number(val):
	try:
		return int(val)
	except ValueError:
		pass

	try:
		v = float(val)
	except (ValueError, OverflowError):
		pass
	else:
		if isfinite(v):	# true JSON does not support NaN and Inf
			return v

	return val

match_boolean = regex('(?i)(y(?:es)?|true)|(no?|false)').fullmatch

def to_boolean(val):
	m = match_boolean(val)

	if m:
		y, n = m.groups()

		if y:
			return True
		elif n:
			return False

	return val

def try_convert(d, k, fn):
	d[k[:-3]] = fn(d.pop(k))

# convert match object to JSON string
encode = JSONEncoder(ensure_ascii = False, check_circular = False, allow_nan = False).encode

def to_json(m):
	d = m.groupdict()

	for k in tuple(d.keys()):
		if d[k] is None:
			del d[k]
		elif k.endswith('__N'):
			try_convert(d, k, to_number)
		elif k.endswith('__B'):
			try_convert(d, k, to_boolean)

	return encode(d)

# input iterator
it = (to_json(m) for m in (search(s.rstrip()) for s in stdin) if m)

# run
try:
	try:
		print('[', next(it))
	except StopIteration:
		print('[]')
	else:
		for rec in it:
			print(',', rec)

		print(']')
except OSError as err:
	exit(err)
